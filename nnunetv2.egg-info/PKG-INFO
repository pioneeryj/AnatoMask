Metadata-Version: 2.1
Name: nnunetv2
Version: 2.2
Summary: nnU-Net is a framework for out-of-the box image segmentation.
Author: Helmholtz Imaging Applied Computer Vision Lab
Author-email: Fabian Isensee <f.isensee@dkfz-heidelberg.de>
License: MIT License
        
        Copyright (c) 2024 ricklisz
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: homepage, https://github.com/MIC-DKFZ/nnUNet
Project-URL: repository, https://github.com/MIC-DKFZ/nnUNet
Keywords: deep learning,image segmentation,semantic segmentation,medical image analysis,medical image segmentation,nnU-Net,nnunet
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Healthcare Industry
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Topic :: Scientific/Engineering :: Medical Science Apps.
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=2.0.0
Requires-Dist: acvl-utils>=0.2
Requires-Dist: dynamic-network-architectures>=0.2
Requires-Dist: tqdm
Requires-Dist: dicom2nifti
Requires-Dist: scipy
Requires-Dist: batchgenerators>=0.25
Requires-Dist: numpy
Requires-Dist: scikit-learn
Requires-Dist: scikit-image>=0.19.3
Requires-Dist: SimpleITK>=2.2.1
Requires-Dist: pandas
Requires-Dist: graphviz
Requires-Dist: tifffile
Requires-Dist: requests
Requires-Dist: nibabel
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: imagecodecs
Requires-Dist: yacs
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"
Requires-Dist: pre-commit; extra == "dev"

# AnatoMask: Enhancing Medical Image Segmentation with Reconstruction-guided Self-masking
[arxiv](https://arxiv.org/abs/2407.06468)

# Linux-version for AnatoMask
Please clone our repo and install nnUNetv2 from our source.

`pip install -e .`

Please also ensure setting up your system variables correctly following nnUNet's instructions:
[instructions](https://github.com/MIC-DKFZ/nnUNet/blob/master/documentation/setting_up_paths.md)

Other packages that we use:
`cuda==12.1
torch==2.0.1
simpleitk==2.3.1
`
# What is AnatoMask?
Our hypothesis is pretty simple: _masked image modeling_ + _ConvNet backbone_ = _success_ for medical image segmentation. 

Given nnUNet's state-of-the-art performance, we want to offer the option to conduct self-supervised pretraining leveraging nnUNet's **whole pipeline**.

Currently, we offer the option to use 1). **SparK**, which is the CNN equivalent of masked autoencoders and 2). **AnatoMask**, which refines SparK by bootstrapping difficult regions to form more difficult pretraining masks. After pretraining on some dataset, we can transfer these weights for downstream segmentation tasks. 

Check out this comparison:
![Comparison with random masking](figs/Anatomask1.png)

Currently, our backbones are all CNNs! This ensures optimal performance for segmentation :)

# Pretraining using AnatoMask
Step 1: Prepare your segmentation model's encoder.  An example is given for STUNet_head.py. 

For more info on building your own CNN encoder, refer to SparK's [guideline](https://github.com/keyu-tian/SparK/tree/main/pretrain) 

Step 2: Go to [ssl_pretrain](https://github.com/ricklisz/AnatoMask/blob/main/nnunetv2/training/nnUNetTrainer/variants/pretrain/pretrain_AntoMask.py)

A few more things to do:
* Set up your `output_folder = 'XXX'` This contains your saved model weights. 
* Set up your `preprocessed_dataset_folder = 'XXX/nnUNet_preprocessed/Dataset009_Spleen/nnUNetPlans_3d_fullres'` This is your preprocessed nnUNet dataset. Please be sure to preprocess your dataset first following nnUNet's tutorial!
* Find your nnUNet splits file (or create your own split if you are so inclined). `splits_file = 'XXX/nnUNet_preprocessed/Dataset009_Spleen/splits_final.json'` You can get this by running nnUNet once on your dataset. 
* Find your dataset json file: `dataset_json = load_json('XXX/Dataset009_Spleen/dataset.json')`
* Find your plan json file: `plans = load_json('XXX/nnUNet_preprocessed/Dataset009_Spleen/nnUNetPlans.json')`
* Run: `python pretrain_AnatoMask.py`

Note: You can use SparK by following the same steps and run `pretrain.py` 

# Finetuning
Define your function to load pretrained weights here (an example is given) [EXAMPLE](https://github.com/ricklisz/AnatoMask/blob/main/nnunetv2/run/load_pretrained_weights.py)

Import your function and replace nnUNet's `load_pretrained_weights` [HERE](https://github.com/ricklisz/AnatoMask/blob/main/nnunetv2/run/run_training.py)

Finally, run your nnUNet training command as usual, but adding `-pretrained_weights PATH_TO_YOUR_WEIGHTS`

Our workflow currently supports STUNetTrainer -> [HERE](https://github.com/ricklisz/AnatoMask/blob/main/nnunetv2/training/nnUNetTrainer/STUNetTrainer.py)

If you want to use your own model, write your own trainer class following STUNetTrainer's example. 

# What exactly does AnatoMask do?
We propose a reconstruction-guided masking strategy, so that the model learns the anatomically significant regions through reconstruction losses. This is done by using self-distillation. Basically, a teacher network first identifies important regions to mask and generates a more difficult mask for the student to solve.  
To prevent the network from converging to a suboptimal solution early during training, we use an easy-to-hard a masking dynamics function controlling the difficulty of the MIM objective.
![Overview](figs/workflow.png)

#  Model Zoo
TBC

# TO DO
* Release pretrained weights and finetuned weights. 

# Reference
Please cite [here](https://scholar.google.com/citations?view_op=view_citation&hl=en&user=MxO6qiIAAAAJ&sortby=pubdate&citation_for_view=MxO6qiIAAAAJ:LkGwnXOMwfcC) when using AnatoMask:

`Li, Y., Luan, T., Wu, Y., Pan, S., Chen, Y., & Yang, X. (2024). AnatoMask: Enhancing Medical Image Segmentation with Reconstruction-guided Self-masking. arXiv preprint arXiv:2407.06468.`

